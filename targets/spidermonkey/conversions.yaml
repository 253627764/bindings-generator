definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "js_${generator.prefix}_${class_name}_${func_name}"
  sfunction: "js_${generator.prefix}_${class_name}_${func_name}"
  constructor: "js_${generator.prefix}_${class_name}_constructor"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
    bool: "JSBool"
    float: "double"
    short: "int32_t"
    "unsigned char": "uint16_t"
    "char": "int32_t"
  to_native:
    # jsval to int
    int: "JS_ValueToInt32(cx, ${in_value}, (int32_t *)&${out_value})"
    "unsigned int": "JS_ValueToECMAUint32(cx, ${in_value}, &${out_value})"
    "unsigned char": "JS_ValueToUint16(cx, ${in_value}, &${out_value})"
    short: "JS_ValueToInt32(cx, ${in_value}, &${out_value})"
    char: "JS_ValueToInt32(cx, ${in_value}, &${out_value})"
    bool: "JS_ValueToBoolean(cx, ${in_value}, &${out_value})"
    float: "JS_ValueToNumber(cx, ${in_value}, &${out_value})"
    double: "${out_value} = JSVAL_TO_DOUBLE(${in_value})"
    # jsval has to be a TypedArray, a UInt32Array with 2 elements
    "long long": "${out_value} = jsval_to_long_long(cx, ${in_value})"
    "std::string": "${out_value} = jsval_to_c_string(cx, ${in_value})"
    "const char*": "${out_value} = jsval_to_c_string(cx, ${in_value})"
    object: |
      do {
      ${($level + 1) * '\t'}js_proxy_t *proxy;
      ${($level + 1) * '\t'}JSObject *tmpObj = JSVAL_TO_OBJECT(${in_value});
      ${($level + 1) * '\t'}JS_GET_NATIVE_PROXY(proxy, tmpObj);
      ${($level + 1) * '\t'}${out_value} = (${ntype})(proxy ? proxy->ptr : NULL);
      ${($level + 1) * '\t'}TEST_NATIVE_OBJECT(cx, ${out_value})
      ${($level + 0) * '\t'}} while (0)
    "CCPoint": "${out_value} = jsval_to_ccpoint(cx, ${in_value})"
    "CCRect": "${out_value} = jsval_to_ccrect(cx, ${in_value})"
    "CCSize": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp; jsval jswidth, jsheight;
      ${($level + 1) * '\t'}double width, height;
      ${($level + 1) * '\t'}if (!JS_ValueToObject(cx, ${in_value}, &tmp)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "width", &jswidth)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "height", &jsheight)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jswidth, &width)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsheight, &height)) return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = cocos2d::CCSize(width, height);
      ${($level + 0) * '\t'}} while (0)
    "const ccGridSize": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp; jsval jsx, jsy;
      ${($level + 1) * '\t'}double x, y;
      ${($level + 1) * '\t'}if (!JS_ValueToObject(cx, ${in_value}, &tmp)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "x", &jsx)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "y", &jsy)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsx, &x)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsy, &y)) return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = cocos2d::ccg(x, y);
      ${($level + 0) * '\t'}} while (0)
    "const ccColor4B": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp; jsval jsr, jsg, jsb, jsa;
      ${($level + 1) * '\t'}double r, g, b, a;
      ${($level + 1) * '\t'}if (!JS_ValueToObject(cx, ${in_value}, &tmp)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "r", &jsr)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "g", &jsg)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "b", &jsb)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "a", &jsa)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsr, &r)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsg, &g)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsb, &b)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsa, &a)) return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = cocos2d::ccc4(r, g, b, a);
      ${($level + 0) * '\t'}} while (0)
    "const ccColor4F": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp; jsval jsr, jsg, jsb, jsa;
      ${($level + 1) * '\t'}double r, g, b, a;
      ${($level + 1) * '\t'}if (!JS_ValueToObject(cx, ${in_value}, &tmp)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "r", &jsr)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "g", &jsg)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "b", &jsb)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "a", &jsa)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsr, &r)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsg, &g)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsb, &b)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsa, &a)) return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = cocos2d::ccc4f(r, g, b, a);
      ${($level + 0) * '\t'}} while (0)
    "const ccColor3B": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp; jsval jsr, jsg, jsb;
      ${($level + 1) * '\t'}double r, g, b;
      ${($level + 1) * '\t'}if (!JS_ValueToObject(cx, ${in_value}, &tmp)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "r", &jsr)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "g", &jsg)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_GetProperty(cx, tmp, "b", &jsb)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsr, &r)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsg, &g)) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_ValueToNumber(cx, jsb, &b)) return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = cocos2d::ccc3(r, g, b);
      ${($level + 0) * '\t'}} while (0)

  from_native:
    # int to jsval
    int: "JS_NewNumberValue(cx, ${in_value}, &${out_value})"
    "unsigned int": "JS_NewNumberValue(cx, ${in_value}, &${out_value})"
    "unsigned char": "JS_NewNumberValue(cx, ${in_value}, &${out_value})"
    "long long": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp = JS_NewUint32Array(cx, 2);
      ${($level + 1) * '\t'}int32_t *data = (int32_t *)JS_GetArrayBufferViewData(tmp, cx);
      ${($level + 1) * '\t'}data[0] = (${in_value} >> 32);
      ${($level + 1) * '\t'}data[1] = (${in_value} & 0xffffffff);
      ${($level + 1) * '\t'}${out_value} = OBJECT_TO_JSVAL(tmp);
      ${$level * '\t'}} while (0)
    "std::string": |
      do {
      ${($level + 1) * '\t'}JSString *str = JS_NewStringCopyZ(cx, ${in_value}.c_str());
      ${($level + 1) * '\t'}${out_value} = STRING_TO_JSVAL(str);
      ${$level * '\t'}} while (0)
    "const char*": |
      do {
      ${($level + 1) * '\t'}JSString *str = JS_NewStringCopyZ(cx, ${in_value});
      ${($level + 1) * '\t'}${out_value} = STRING_TO_JSVAL(str);
      ${$level * '\t'}} while (0)
    bool: "${out_value} = BOOLEAN_TO_JSVAL(${in_value})"
    float: "JS_NewNumberValue(cx, ${in_value}, &${out_value})"
    double: "JS_NewNumberValue(cx, ${in_value}, &${out_value})"
    object: |
      do {
      ${($level + 1) * '\t'}if (${in_value}) {
      ${($level + 2) * '\t'}js_proxy_t *proxy = js_get_or_create_proxy<${ntype.replace("*", "")}>(cx, ${in_value});
      ${($level + 2) * '\t'}${out_value} = OBJECT_TO_JSVAL(proxy->obj);
      ${($level + 1) * '\t'}} else {
      ${($level + 2) * '\t'}${out_value} = JSVAL_NULL;
      ${($level + 1) * '\t'}}
      ${($level) * '\t'}} while (0)
    "CCPoint": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp = JS_NewObject(cx, NULL, NULL, NULL);
      ${($level + 1) * '\t'}if (!tmp) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_DefineProperty(cx, tmp, "x", DOUBLE_TO_JSVAL(${in_value}.x), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "y", DOUBLE_TO_JSVAL(${in_value}.y), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT))
      ${($level + 1) * '\t'}   return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = OBJECT_TO_JSVAL(tmp);
      ${($level + 0) * '\t'}} while (0)
    "CCRect": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp = JS_NewObject(cx, NULL, NULL, NULL);
      ${($level + 1) * '\t'}if (!tmp) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_DefineProperty(cx, tmp, "x", DOUBLE_TO_JSVAL(${in_value}.origin.x), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "y", DOUBLE_TO_JSVAL(${in_value}.origin.y), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "width", DOUBLE_TO_JSVAL(${in_value}.size.width), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "height", DOUBLE_TO_JSVAL(${in_value}.size.height), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT))
      ${($level + 1) * '\t'}   return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = OBJECT_TO_JSVAL(tmp);
      ${($level + 0) * '\t'}} while (0)
    "CCSize": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp = JS_NewObject(cx, NULL, NULL, NULL);
      ${($level + 1) * '\t'}if (!tmp) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_DefineProperty(cx, tmp, "width", DOUBLE_TO_JSVAL(${in_value}.width), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "height", DOUBLE_TO_JSVAL(${in_value}.height), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT))
      ${($level + 1) * '\t'}   return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = OBJECT_TO_JSVAL(tmp);
      ${($level + 0) * '\t'}} while (0)
    "const ccGridSize":
      do {
      ${($level + 1) * '\t'}JSObject *tmp = JS_NewObject(cx, NULL, NULL, NULL);
      ${($level + 1) * '\t'}if (!tmp) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_DefineProperty(cx, tmp, "x", DOUBLE_TO_JSVAL(${in_value}.x), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "y", DOUBLE_TO_JSVAL(${in_value}.y), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT))
      ${($level + 1) * '\t'}   return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = OBJECT_TO_JSVAL(tmp);
      ${($level + 0) * '\t'}} while (0)
    "const ccColor4B": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp = JS_NewObject(cx, NULL, NULL, NULL);
      ${($level + 1) * '\t'}if (!tmp) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_DefineProperty(cx, tmp, "r", DOUBLE_TO_JSVAL(${in_value}.r), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "g", DOUBLE_TO_JSVAL(${in_value}.g), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "b", DOUBLE_TO_JSVAL(${in_value}.b), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "a", DOUBLE_TO_JSVAL(${in_value}.a), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT))
      ${($level + 1) * '\t'}   return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = OBJECT_TO_JSVAL(tmp);
      ${($level + 0) * '\t'}} while (0)
    "const ccColor4F": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp = JS_NewObject(cx, NULL, NULL, NULL);
      ${($level + 1) * '\t'}if (!tmp) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_DefineProperty(cx, tmp, "r", DOUBLE_TO_JSVAL(${in_value}.r), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "g", DOUBLE_TO_JSVAL(${in_value}.g), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "b", DOUBLE_TO_JSVAL(${in_value}.b), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "a", DOUBLE_TO_JSVAL(${in_value}.a), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT))
      ${($level + 1) * '\t'}   return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = OBJECT_TO_JSVAL(tmp);
      ${($level + 0) * '\t'}} while (0)
    "const ccColor3B": |
      do {
      ${($level + 1) * '\t'}JSObject *tmp = JS_NewObject(cx, NULL, NULL, NULL);
      ${($level + 1) * '\t'}if (!tmp) return JS_FALSE;
      ${($level + 1) * '\t'}if (!JS_DefineProperty(cx, tmp, "r", DOUBLE_TO_JSVAL(${in_value}.r), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "g", DOUBLE_TO_JSVAL(${in_value}.g), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT) ||
      ${($level + 1) * '\t'}    !JS_DefineProperty(cx, tmp, "b", DOUBLE_TO_JSVAL(${in_value}.b), NULL, NULL, JSPROP_ENUMERATE | JSPROP_PERMANENT))
      ${($level + 1) * '\t'}   return JS_FALSE;
      ${($level + 1) * '\t'}${out_value} = OBJECT_TO_JSVAL(tmp);
      ${($level + 0) * '\t'}} while (0)
